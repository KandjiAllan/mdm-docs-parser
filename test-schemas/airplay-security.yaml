title: AirPlay Security
description: AirPlay Security settings
payload:
  payloadtype: com.apple.airplay.security
  supportedOS:
    tvOS:
      introduced: "11.0"
      multiple: false
      supervised: false
      allowmanualinstall: true
  content:
    Manages the AirPlay Security settings on Apple TV (Settings > AirPlay >
    Security). Use this payload to lock Apple TV to a particular style of AirPlay
    security. The setting can enable/disable an on-screen passcode, or require a specific
    password phrase.
payloadkeys:
  - key: SecurityType
    title: Security Type
    type: <string>
    presence: required
    rangelist:
      - PASSCODE_ONCE
      - PASSCODE_ALWAYS
      - PASSWORD
    content: |-
      The security policy for AirPlay.
      'PASSCODE_ONCE' requires an onscreen passcode on first connection from a device. Subsequent connections from the same device aren't prompted.
      'PASSCODE_ALWAYS' requires an onscreen passcode for every AirPlay connection. After an AirPlay connection ends, reconnecting within 30 seconds is allowed without a password.

      'PASSWORD' requires a passphrase as specified in the 'Password' key.

      'NONE' was deprecated in tvOS 11.3. Existing profiles using 'NONE' get the 'PASSWORD_ONCE' behavior.
  - key: AccessType
    title: Access Type
    type: <string>
    presence: required
    rangelist:
      - ANY
      - WIFI_ONLY
    content: |-
      The access policy for AirPlay.
      'ANY' allows connections from both Ethernet/WiFi and Apple Wireless Direct Link.
      'WIFI_ONLY' allows connections only from devices on the same Ethernet/WiFi network as Apple TV.
  - key: Password
    title: Password
    type: <string>
    presence: optional
    content: The AirPlay password; required if SecurityType is 'PASSWORD'.
  - key: EAPClientConfiguration
    title: EAP Client Configuration
    type: <dictionary>
    presence: optional
    content: The enterprise network configuration.
    subkeys:
      - key: AcceptEAPTypes
        title: Accept EAP Types
        type: <array>
        presence: required
        content: |-
          The system accepts the following EAP types:
          13 = TLS
          17 = LEAP
          18 = EAP-SIM
          21 = TTLS
          23 = EAP-AKA
          25 = PEAP
          43 = EAP-FAST

          For EAP-TLS authentication without a network payload, install the necessary identity certificates and have your users select EAP-TLS mode in the 802.1X credentials dialog that appears when they connect to the network. For other EAP types, a network payload is necessary and must specify the correct settings for the network.
        subkeys:
          - key: EAPType
            title: EAP Type
            type: <integer>
            rangelist:
              - 13
              - 17
              - 18
              - 21
              - 23
              - 25
              - 43
      - key: UserName
        title: Username
        type: <string>
        presence: optional
        content:
          The user name for the account. If you don't specify a value, the system
          prompts the user during login.
      - key: UserPassword
        title: Password
        type: <string>
        presence: optional
        content:
          The user's password. If you don't specify a value, the system prompts
          the user during login.
      - key: PayloadCertificateAnchorUUID
        title: Certificate Anchor UUID
        type: <array>
        presence: optional
        content:
          An array of the UUID of a certificate payloads in the same profile to
          trust for authentication. Use this key to prevent the device from asking the
          user whether to trust the listed certificates. Dynamic trust (the certificate
          dialogue) is in a disabled state if you specify this property without also enabling
          'TLSAllowTrustExceptions'.
        subkeys:
          - key: CertificateAnchorUUID
            title: Individual Certificate Anchor UUID
            type: <string>
            format: ^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$
      - key: TLSTrustedCertificates
        title: TLS Trusted Certificates
        type: <array>
        presence: optional
        content:
          An array of trusted certificates. Each entry in the array must contain
          certificate data that represents an anchor certificate used for verifying the
          server certificate.
        subkeys:
          - key: TLSTrustedCertificatesItem
            type: <string>
            presence: required
            content: A certificate identifier.
      - key: TLSTrustedServerNames
        title: TLS Trusted Server Names
        type: <array>
        presence: optional
        content: |-
          The list of accepted server certificate common names. If a server presents a certificate that isn't in this list, the system doesn't trust it.
          If you specify this property, the system disables dynamic trust (the certificate dialog) unless you also specify 'TLSAllowTrustExceptions' with the value 'true'.
          If necessary, use wildcards to specify the name, such as 'wpa.*.example.com'.
        subkeys:
          - key: TLSTrustedServerName
            title: Individual Trusted TLS Server Name
            type: <string>
      - key: TLSAllowTrustExceptions
        title: Allow Trust Exceptions
        supportedOS:
          iOS:
            removed: "8.0"
        type: <boolean>
        presence: optional
        default: true
        content: |-
          If 'true', allows a dynamic trust decision by the user. The dynamic trust is the certificate dialogue that appears when the system doesn't trust a certificate.
          If 'false', the authentication fails if the system doesn't already trust the certificate.
          As of iOS 8, Apple no longer supports this key.
      - key: TLSCertificateIsRequired
        supportedOS:
          iOS:
            introduced: "7.0"
        type: <boolean>
        presence: optional
        default: false
        content: |-
          If 'true', allows for two-factor authentication for EAP-TTLS, PEAP, or EAP-FAST. If 'false', allows for zero-factor authentication for EAP-TLS.
          If you don't specify a value, the default is 'true' for EAP-TLS, and 'false' for other EAP types.
      - key: TTLSInnerAuthentication
        title: TTLS Inner Authentication
        type: <string>
        presence: optional
        rangelist:
          - PAP
          - EAP
          - CHAP
          - MSCHAP
          - MSCHAPv2
        default: MSCHAPv2
        content: The inner authentication that the TTLS module uses.
      - key: TLSMinimumVersion
        supportedOS:
          iOS:
            introduced: "11.0"
          macOS:
            introduced: "10.13"
          tvOS:
            introduced: "11.0"
        type: <string>
        presence: optional
        rangelist:
          - "1.0"
          - "1.1"
          - "1.2"
          - "1.3"
        default: "1.0"
        content: The minimum TLS version for EAP authentication.
      - key: TLSMaximumVersion
        supportedOS:
          iOS:
            introduced: "11.0"
          macOS:
            introduced: "10.13"
          tvOS:
            introduced: "11.0"
        type: <string>
        presence: optional
        rangelist:
          - "1.0"
          - "1.1"
          - "1.2"
          - "1.3"
        default: "1.2"
        content: The maximum TLS version for EAP authentication.
      - key: OuterIdentity
        title: Outer Identity
        type: <string>
        presence: optional
        content: |-
          A name that hides the user's true name. The user's actual name appears only inside the encrypted tunnel. For example, you might set this to anonymous or anon, or anon@mycompany.net. It can increase security because an attacker can't see the authenticating user's name in the clear.

          This key is only relevant to TTLS, PEAP, and EAP-FAST.
      - key: EAPFASTUsePAC
        title: Use PAC
        type: <boolean>
        presence: optional
        default: false
        content:
          If 'true', the device uses an existing PAC if it's present. Otherwise,
          the server must present its identity using a certificate.
      - key: EAPFASTProvisionPAC
        title: Provision PAC
        type: <boolean>
        presence: optional
        default: false
        content: |-
          If 'true', allows PAC provisioning.

          This value is only applicable if 'EAPFASTUsePAC' is 'true'. This value must be 'true' for EAP-FAST PAC usage to succeed because there's no other way to provision a PAC.
      - key: EAPFASTProvisionPACAnonymously
        title: Provision PAC Anonymously
        type: <boolean>
        presence: optional
        default: false
        content:
          If 'true', provisions the device anonymously. Note that there are known
          machine-in-the-middle attacks for anonymous provisioning.
      - key: EAPSIMNumberOfRANDs
        title: Allow Two RANDs
        supportedOS:
          iOS:
            introduced: "8.0"
        type: <integer>
        presence: optional
        rangelist:
          - 2
          - 3
        default: 3
        content: |-
          The minimum number of RAND values to accept from the server.
          For use with EAP-SIM only.
      - key: SystemModeCredentialsSource
        type: <string>
        presence: optional
        content: |-
          Set this string to 'ActiveDirectory' to use the AD computer name and password credentials.
          If using this property, you can't use 'SystemModeUseOpenDirectoryCredentials'.
      - key: SystemModeUseOpenDirectoryCredentials
        type: <boolean>
        presence: optional
        default: false
        content: |-
          If 'true', the system mode connection tries to use the Open Directory credentials.
          If using this property, you can't use 'SystemModeCredentialsSource'.
      - key: OneTimeUserPassword
        title: Per-Connection Password
        supportedOS:
          iOS:
            introduced: "8.0"
          macOS:
            introduced: "10.8"
          tvOS:
            introduced: "7.0"
        type: <boolean>
        presence: optional
        default: false
        content:
          If 'true', the user receives a prompt for a password each time they connect
          to the network.
